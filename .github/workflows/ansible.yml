# .github/workflows/ansible.yml

name: 2. Ansible Deployment

on:
  workflow_run:
    workflows: ["1. Provision Infrastructure"] # This name must match the name of the terraform.yml workflow
    types:
      - completed

jobs:
  deploy:
    # This ensures the deployment only runs if the infrastructure step was successful
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Download IP Address Artifact
        uses: actions/download-artifact@v4
        with:
          name: ec2-ip
          # This is required to find the artifact from the triggering workflow run
          run-id: ${{ github.event.workflow_run.id }}

      - name: Display IP
        run: cat ip_address.txt

      - name: Run Ansible Deployment
        env:
          ANSIBLE_PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          ANSIBLE_HOST_KEY_CHECKING: "False"
        run: |
          # Install necessary tools
          sudo apt-get update
          sudo apt-get install -y ansible sshpass

          # Read the IP from the downloaded artifact
          IP_ADDRESS=$(cat ip_address.txt | tr -d '\r')
          echo "✅ Deploying to server at IP: $IP_ADDRESS"

          # Validate the IP address
          if [[ ! "$IP_ADDRESS" =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "❌ Error: Invalid or empty IP address from artifact."
            exit 1
          fi

          echo "$ANSIBLE_PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem

          sleep 30  # Ensure EC2 is fully ready

          ansible-playbook ansible/playbook.yml \
            --inventory "$IP_ADDRESS," \
            --private-key private_key.pem \
            --user ec2-user \
            --extra-vars "dockerhub_username=${{ secrets.DOCKERHUB_USERNAME }} mongo_uri='${{ secrets.MONGO_URI }}' google_client_id='${{ secrets.GOOGLE_CLIENT_ID }}' google_client_secret='${{ secrets.GOOGLE_CLIENT_SECRET }}' aws_access_key_id='${{ secrets.AWS_ACCESS_KEY_ID }}' aws_secret_access_key='${{ secrets.AWS_SECRET_ACCESS_KEY }}' aws_region='ap-south-1' aws_bucket_name='${{ secrets.AWS_BUCKET_NAME }}'"

          rm -f private_key.pem
