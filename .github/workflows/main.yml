# .github/workflows/main.yml

name: Build and Deploy Sendmate

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository Code
        uses: actions/checkout@v3

      # STEP 1: Build Docker image and push to Docker Hub
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/sendmate:latest

      # STEP 2: Provision infrastructure with Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1

      - name: Terraform Init
        run: terraform init
        working-directory: ./terraform

      - name: Terraform Apply
        run: terraform apply -auto-approve -var="ec2_key_pair_name=${{ secrets.EC2_KEY_PAIR_NAME }}"
        working-directory: ./terraform

      # STEP 3: Configure EC2 and Deploy App via Ansible
      - name: Run Ansible Deployment
        env:
          ANSIBLE_PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          ANSIBLE_HOST_KEY_CHECKING: "False"
        run: |
          sudo apt-get update
          sudo apt-get install -y ansible sshpass

          # Step 1: Get public IP from Terraform output
          IP_ADDRESS=$(terraform -chdir=terraform output -raw public_ip 2>/dev/null)

          echo "üìç Debug: Captured IP Address = '$IP_ADDRESS'"

          # Step 2: Validate IP address format
          if [[ ! "$IP_ADDRESS" =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "‚ùå Error: Invalid or missing IP address from Terraform output"
            exit 1
          fi

          echo "‚úÖ Valid IP Address: $IP_ADDRESS"

          # Step 3: Write SSH key to file securely
          echo "$ANSIBLE_PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem

          # Step 4: Wait for EC2 to fully boot
          echo "‚è≥ Waiting for EC2 to be ready..."
          sleep 20

          # Step 5: Run Ansible playbook
          ansible-playbook ansible/playbook.yml \
            --inventory "$IP_ADDRESS," \
            --private-key private_key.pem \
            --user ec2-user \
            --extra-vars "dockerhub_username=${{ secrets.DOCKERHUB_USERNAME }} mongo_uri=${{ secrets.MONGO_URI }} google_client_id=${{ secrets.GOOGLE_CLIENT_ID }} google_client_secret=${{ secrets.GOOGLE_CLIENT_SECRET }} aws_access_key_id=${{ secrets.AWS_ACCESS_KEY_ID }} aws_secret_access_key=${{ secrets.AWS_SECRET_ACCESS_KEY }} aws_region=ap-south-1 aws_bucket_name=${{ secrets.AWS_BUCKET_NAME }}"

          # Step 6 (Optional): Cleanup SSH key
          # rm private_key.pem
